import 'user'
import 'problem'
import 'executable'
import 'testcase'
import 'language'
import 'submission'
import 'judging'
import 'judging-run'

enum FileKind {
  FILE
  DIRECTORY
}

model File {
  name                        String      @id
  type                        String
  size                        Int
  md5Sum                      String
  kind                        FileKind    @default(FILE)
  createdAt                   DateTime    @default(now())
  createdById                 Int?
  createdBy                   User?       @relation(fields: [createdById], references: [id])
  parentDirectoryName         String?
  parentDirectory             File?       @relation("FileParentDirectory", fields: [parentDirectoryName], references: [name])
  children                    File[]      @relation("FileParentDirectory")

  problems                    Problem[]
  executableSourceFile        Executable? @relation("ExecutableSourceFile")
  executableBuildScript       Executable? @relation("ExecutableBuildScript")
  testcaseInputFile           Testcase?   @relation("TestcaseInputFile")
  testcaseOutputFile          Testcase?   @relation("TestcaseOutputFile")
  languageBuildScript         Language?
  submissionSourceFile        Submission?
  judgingCompileOutputFile    Judging?
  judgingRunOutputFile        JudgingRun? @relation("JudgingRunOutputFile")
  judgingRunErrorOutputFile   JudgingRun? @relation("JudgingRunErrorOutputFile")
  judgingRunCheckerOutputFile JudgingRun? @relation("JudgingRunCheckerOutputFile")

  @@allow('read', auth() != null && (auth().roleName == 'admin' || auth().roleName == 'jury'))
  @@allow('read', auth() != null && auth().roleName == 'team' && submissionSourceFile.teamId == auth().teamId)
  @@allow('read', auth() != null && auth().roleName == 'team' && problems?[contests?[contest.enabled == true && (contest.openToAllTeams == true || contest.teams?[teamId == auth().teamId])]])
  @@allow('read', auth() == null && problems?[contests?[contest.enabled == true && contest.public == true]])
  @@allow('read,create,update', auth() != null && auth().roleName == 'team' && (name == 'Submissions' || (startsWith(name, 'Submissions/') && contains(name, auth().team.name))) )
  @@allow('read',
    auth() != null && auth().roleName == 'judge-host' &&
    (
      executableSourceFile.problemsRunScript?[contests?[submissions?[judgeHost == null || (judgeHost.active && judgeHost.userId == auth().id)]]] ||
      executableSourceFile.problemsCheckScript?[contests?[submissions?[judgeHost == null || (judgeHost.active && judgeHost.userId == auth().id)]]] ||
      executableBuildScript.problemsRunScript?[contests?[submissions?[judgeHost == null || (judgeHost.active && judgeHost.userId == auth().id)]]] ||
      executableBuildScript.problemsCheckScript?[contests?[submissions?[judgeHost == null || (judgeHost.active && judgeHost.userId == auth().id)]]] ||
      testcaseInputFile.problem.contests?[submissions?[judgeHost == null || (judgeHost.active && judgeHost.userId == auth().id)]] ||
      testcaseOutputFile.problem.contests?[submissions?[judgeHost == null || (judgeHost.active && judgeHost.userId == auth().id)]] ||
      languageBuildScript.submissions?[judgeHost == null || (judgeHost.active && judgeHost.userId == auth().id)] ||
      submissionSourceFile.contest.submissions?[judgeHost == null || (judgeHost.active && judgeHost.userId == auth().id)]
    )
  )
  @@allow('read,create,update', auth() != null && auth().roleName == 'judge-host' && (name == 'Submissions' || startsWith(name, 'Submissions/')))
  @@allow('create,update,delete', auth() != null && auth().roleName == 'admin')
}
