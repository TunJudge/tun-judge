import 'user'
import 'file'
import 'contest'
import 'judge-host'
import 'submission'
import 'judging-run'

enum JudgingResult {
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
  SYSTEM_ERROR
}

model Judging {
  id                    Int            @id @default(autoincrement())
  startTime             DateTime
  endTime               DateTime?
  result                JudgingResult?
  systemError           String?
  verified              Boolean        @default(false)
  verifyComment         String?
  valid                 Boolean        @default(true)
  compileOutputFileName String?        @unique
  compileOutputFile     File?          @relation(fields: [compileOutputFileName], references: [name], onDelete: Restrict, onUpdate: Restrict)
  submissionId          Int
  submission            Submission     @relation(fields: [submissionId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  juryMemberId          Int?
  juryMember            User?          @relation(fields: [juryMemberId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  contestId             Int
  contest               Contest        @relation(fields: [contestId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  judgeHostId           Int
  judgeHost             JudgeHost      @relation(fields: [judgeHostId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  runs                  JudgingRun[]

  @@allow('read', auth() != null && (auth().roleName == 'admin' || auth().roleName == 'jury'))
  @@allow('update', auth() != null && auth().roleName == 'jury' && (future().juryMemberId == null || future().juryMemberId == auth().id))
  @@allow('read', auth() != null && auth().roleName == 'team' && submission.teamId == auth().teamId && valid == true && (contest.verificationRequired == false || verified == true))
  @@allow('read,create,update', auth() != null && auth().roleName == 'judge-host' && judgeHost.active && judgeHost.userId == auth().id)
  @@allow('create,update,delete', auth() != null && auth().roleName == 'admin')
}
