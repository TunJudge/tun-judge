//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum FileKind {
  FILE
  DIRECTORY
}

enum ExecutableType {
  RUNNER
  CHECKER
}

enum JudgingRunResult {
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
}

enum JudgingResult {
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
  SYSTEM_ERROR
}

/// @@allow('all', auth().roleName in ['admin'])
model InitialDataEntity {
  id   Int      @id() @default(autoincrement())
  name String   @default("")
  date DateTime @db.Timestamp(6)
}

/// @@allow('read', auth() != null && (auth().roleName == 'admin' || auth().roleName == 'jury'))
/// @@allow('create,update,delete', auth() != null && auth().roleName == 'admin')
model User {
  id            Int                    @id() @default(autoincrement())
  name          String
  username      String                 @unique()
  /// @password
  password      String
  email         String?
  lastLogin     DateTime?
  lastIpAddress String?
  enabled       Boolean                @default(true)
  /// @omit
  sessionId     String?
  roleName      String
  role          Role                   @relation(fields: [roleName], references: [name])
  teamId        Int?
  team          Team?                  @relation(fields: [teamId], references: [id], onDelete: SetNull, onUpdate: Restrict)
  files         File[]
  judgeHost     JudgeHost?
  judgings      Judging[]
  sentMessages  ClarificationMessage[]
  seenMessages  ClarificationSeen[]
}

/// @@allow('read', auth() != null && auth().roleName == 'admin')
model Role {
  name        String @id() @unique()
  description String
  users       User[]
}

/// @@allow('read', auth() != null && (auth().roleName == 'admin' || auth().roleName == 'jury'))
/// @@allow('create,update,delete', auth() != null && auth().roleName == 'admin')
model Team {
  id             Int             @id() @default(autoincrement())
  name           String          @unique()
  enabled        Boolean         @default(true)
  room           String?
  comments       String?
  penalty        Int             @default(0)
  categoryId     Int
  category       TeamCategory    @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  users          User[]
  contests       TeamContest[]
  submissions    Submission[]
  clarifications Clarification[]
  scores         ScoreCache[]
}

/// @@allow('read', auth() != null && (auth().roleName == 'admin' || auth().roleName == 'jury'))
/// @@allow('create,update,delete', auth() != null && auth().roleName == 'admin')
model TeamContest {
  teamId    Int
  team      Team    @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  contestId Int
  contest   Contest @relation(fields: [contestId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@unique([teamId, contestId])
}

/// @@allow('read', auth() != null && (auth().roleName == 'admin' || auth().roleName == 'jury'))
/// @@allow('create,update,delete', auth() != null && auth().roleName == 'admin')
model TeamCategory {
  id      Int     @id() @default(autoincrement())
  name    String  @unique()
  rank    Int     @unique()
  color   String  @default("#ffffff")
  visible Boolean @default(true)
  teams   Team[]
}

/// @@allow('read', auth() != null && (auth().roleName == 'admin' || auth().roleName == 'jury'))
/// @@allow('create,update,delete', auth() != null && auth().roleName == 'admin')
model Contest {
  id                   Int              @id() @default(autoincrement())
  name                 String
  shortName            String           @unique()
  activateTime         DateTime
  startTime            DateTime
  freezeTime           DateTime?
  endTime              DateTime?
  unfreezeTime         DateTime?
  enabled              Boolean          @default(true)
  processBalloons      Boolean          @default(false)
  public               Boolean          @default(true)
  openToAllTeams       Boolean          @default(false)
  verificationRequired Boolean          @default(false)
  teams                TeamContest[]
  problems             ContestProblem[]
  submissions          Submission[]
  judgings             Judging[]
  scoreCaches          ScoreCache[]
  clarifications       Clarification[]

  @@index([id, enabled])
}

/// @@allow('read', auth() != null && (auth().roleName == 'admin' || auth().roleName == 'jury'))
/// @@allow('create,update,delete', auth() != null && auth().roleName == 'admin')
model Problem {
  id                Int              @id() @default(autoincrement())
  name              String
  timeLimit         Float            @default(0)
  memoryLimit       Int              @default(2097152)
  outputLimit       Int              @default(8192)
  statementFileName String
  statementFile     File             @relation(fields: [statementFileName], references: [name], onDelete: Restrict, onUpdate: Restrict)
  runScriptId       Int
  runScript         Executable       @relation("ProblemRunScript", fields: [runScriptId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  checkScriptId     Int
  checkScript       Executable       @relation("ProblemCheckScript", fields: [checkScriptId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  testcases         Testcase[]
  contests          ContestProblem[]
  submissions       Submission[]
  clarifications    Clarification[]
  scores            ScoreCache[]
}

/// @@allow('read', auth() != null && (auth().roleName == 'admin' || auth().roleName == 'jury'))
/// @@allow('create,update,delete', auth() != null && auth().roleName == 'admin')
model ContestProblem {
  contestId   Int
  contest     Contest @relation(fields: [contestId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  problemId   Int
  problem     Problem @relation(fields: [problemId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  shortName   String
  points      Int     @default(1)
  allowSubmit Boolean @default(true)
  allowJudge  Boolean @default(true)
  color       String?

  @@unique([contestId, shortName])
  @@index([contestId, problemId])
}

model File {
  name                        String      @id()
  type                        String
  size                        Int
  md5Sum                      String
  kind                        FileKind    @default(FILE)
  createdAt                   DateTime    @default(now())
  createdById                 Int?
  createdBy                   User?       @relation(fields: [createdById], references: [id])
  parentDirectoryName         String?
  parentDirectory             File?       @relation("FileParentDirectory", fields: [parentDirectoryName], references: [name])
  children                    File[]      @relation("FileParentDirectory")
  problems                    Problem[]
  executableSourceFile        Executable? @relation("ExecutableSourceFile")
  executableBuildScript       Executable? @relation("ExecutableBuildScript")
  testcaseInputFile           Testcase?   @relation("TestcaseInputFile")
  testcaseOutputFile          Testcase?   @relation("TestcaseOutputFile")
  languageBuildScript         Language?
  submissionSourceFile        Submission?
  judgingCompileOutputFile    Judging?
  judgingRunOutputFile        JudgingRun? @relation("JudgingRunOutputFile")
  judgingRunErrorOutputFile   JudgingRun? @relation("JudgingRunErrorOutputFile")
  judgingRunCheckerOutputFile JudgingRun? @relation("JudgingRunCheckerOutputFile")
}

model Executable {
  id                  Int            @id() @default(autoincrement())
  name                String
  description         String?
  default             Boolean        @default(false)
  dockerImage         String?
  type                ExecutableType
  sourceFileName      String         @unique()
  sourceFile          File           @relation("ExecutableSourceFile", fields: [sourceFileName], references: [name], onDelete: Restrict, onUpdate: Restrict)
  buildScriptName     String?        @unique()
  buildScript         File?          @relation("ExecutableBuildScript", fields: [buildScriptName], references: [name], onDelete: Restrict, onUpdate: Restrict)
  problemsRunScript   Problem[]      @relation("ProblemRunScript")
  problemsCheckScript Problem[]      @relation("ProblemCheckScript")
}

model Testcase {
  id             Int          @id() @default(autoincrement())
  description    String?
  rank           Int
  sample         Boolean      @default(false)
  deleted        Boolean      @default(false)
  inputFileName  String       @unique()
  inputFile      File         @relation("TestcaseInputFile", fields: [inputFileName], references: [name], onDelete: Restrict, onUpdate: Restrict)
  outputFileName String       @unique()
  outputFile     File         @relation("TestcaseOutputFile", fields: [outputFileName], references: [name], onDelete: Restrict, onUpdate: Restrict)
  problemId      Int
  problem        Problem      @relation(fields: [problemId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  judgingRuns    JudgingRun[]

  @@unique([problemId, rank])
  @@index([problemId])
  @@index([sample])
}

model JudgingRun {
  id                    Int              @id() @default(autoincrement())
  result                JudgingRunResult
  endTime               DateTime
  runTime               Float
  runMemory             Float
  judgingId             Int
  judging               Judging          @relation(fields: [judgingId], references: [id], onDelete: Restrict, onUpdate: NoAction)
  testcaseId            Int
  testcase              Testcase         @relation(fields: [testcaseId], references: [id], onDelete: Restrict, onUpdate: NoAction)
  runOutputFileName     String           @unique()
  runOutputFile         File             @relation("JudgingRunOutputFile", fields: [runOutputFileName], references: [name], onDelete: Restrict, onUpdate: Restrict)
  errorOutputFileName   String           @unique()
  errorOutputFile       File             @relation("JudgingRunErrorOutputFile", fields: [errorOutputFileName], references: [name], onDelete: Restrict, onUpdate: Restrict)
  checkerOutputFileName String           @unique()
  checkerOutputFile     File             @relation("JudgingRunCheckerOutputFile", fields: [checkerOutputFileName], references: [name], onDelete: Restrict, onUpdate: Restrict)

  @@unique([judgingId, testcaseId])
}

model Judging {
  id                    Int            @id() @default(autoincrement())
  startTime             DateTime
  endTime               DateTime?
  result                JudgingResult?
  systemError           String?
  verified              Boolean        @default(false)
  verifyComment         String?
  valid                 Boolean        @default(true)
  compileOutputFileName String         @unique()
  compileOutputFile     File           @relation(fields: [compileOutputFileName], references: [name], onDelete: Restrict, onUpdate: Restrict)
  submissionId          Int
  submission            Submission     @relation(fields: [submissionId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  juryMemberId          Int
  juryMember            User           @relation(fields: [juryMemberId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  contestId             Int
  contest               Contest        @relation(fields: [contestId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  judgeHostId           Int
  judgeHost             JudgeHost      @relation(fields: [judgeHostId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  runs                  JudgingRun[]
}

model JudgeHost {
  id          Int          @id() @default(autoincrement())
  hostname    String       @unique()
  active      Boolean      @default(true)
  pollTime    DateTime?
  userId      Int          @unique()
  user        User         @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  submissions Submission[]
  judgings    Judging[]
}

model Submission {
  id             Int       @id() @default(autoincrement())
  submitTime     DateTime
  valid          Boolean   @default(true)
  sourceFileName String    @unique()
  sourceFile     File      @relation(fields: [sourceFileName], references: [name], onDelete: Restrict, onUpdate: Restrict)
  teamId         Int
  team           Team      @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  contestId      Int
  contest        Contest   @relation(fields: [contestId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  problemId      Int
  problem        Problem   @relation(fields: [problemId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  languageId     Int
  language       Language  @relation(fields: [languageId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  judgeHostId    Int
  judgeHost      JudgeHost @relation(fields: [judgeHostId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  judgings       Judging[]

  @@index([contestId, teamId])
  @@index([contestId, problemId])
  @@index([teamId])
  @@index([problemId])
  @@index([languageId])
  @@index([judgeHostId])
  @@index([submitTime])
}

model Language {
  id              Int          @id() @default(autoincrement())
  name            String       @unique()
  dockerImage     String
  extensions      String[]
  allowSubmit     Boolean      @default(true)
  allowJudge      Boolean      @default(true)
  buildScriptName String       @unique()
  buildScript     File         @relation(fields: [buildScriptName], references: [name], onDelete: Restrict, onUpdate: Restrict)
  submissions     Submission[]
}

model Clarification {
  id        Int                    @id() @default(autoincrement())
  general   Boolean                @default(true)
  messages  ClarificationMessage[]
  contestId Int
  contest   Contest                @relation(fields: [contestId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  problemId Int?
  problem   Problem?               @relation(fields: [problemId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  teamId    Int?
  team      Team?                  @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Restrict)
}

model ClarificationMessage {
  id              Int                 @id() @default(autoincrement())
  content         String
  sentTime        DateTime
  sentById        Int
  sentBy          User                @relation(fields: [sentById], references: [id], onDelete: Restrict, onUpdate: Restrict)
  seenBy          ClarificationSeen[]
  clarificationId Int
  clarification   Clarification       @relation(fields: [clarificationId], references: [id], onDelete: Cascade, onUpdate: Restrict)
}

model ClarificationSeen {
  userId    Int
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  messageId Int
  message   ClarificationMessage @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@id([userId, messageId])
}

model ScoreCache {
  contestId              Int
  contest                Contest   @relation(fields: [contestId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  teamId                 Int
  team                   Team      @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  problemId              Int
  problem                Problem   @relation(fields: [problemId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  submissions            Int       @default(0)
  pending                Int       @default(0)
  solveTime              DateTime?
  correct                Boolean   @default(false)
  firstToSolve           Boolean   @default(false)
  restrictedSubmissions  Int       @default(0)
  restrictedPending      Int       @default(0)
  restrictedSolveTime    DateTime?
  restrictedCorrect      Boolean   @default(false)
  restrictedFirstToSolve Boolean   @default(false)

  @@unique([contestId, teamId, problemId])
  @@index([teamId])
  @@index([problemId])
  @@index([contestId])
}
