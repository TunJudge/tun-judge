/* eslint-disable */
const metadata = {
  models: {
    initialDataEntity: {
      name: 'InitialDataEntity',
      fields: {
        id: {
          name: 'id',
          type: 'Int',
          isId: true,
          attributes: [{ name: '@default', args: [] }],
          isAutoIncrement: true,
        },
        name: {
          name: 'name',
          type: 'String',
          attributes: [{ name: '@default', args: [{ value: '' }] }],
        },
        date: {
          name: 'date',
          type: 'DateTime',
        },
      },
      uniqueConstraints: {
        id: {
          name: 'id',
          fields: ['id'],
        },
      },
    },
    user: {
      name: 'User',
      fields: {
        id: {
          name: 'id',
          type: 'Int',
          isId: true,
          attributes: [{ name: '@default', args: [] }],
          isAutoIncrement: true,
        },
        name: {
          name: 'name',
          type: 'String',
        },
        username: {
          name: 'username',
          type: 'String',
        },
        password: {
          name: 'password',
          type: 'String',
        },
        email: {
          name: 'email',
          type: 'String',
          isOptional: true,
        },
        lastLogin: {
          name: 'lastLogin',
          type: 'DateTime',
          isOptional: true,
        },
        lastIpAddress: {
          name: 'lastIpAddress',
          type: 'String',
          isOptional: true,
        },
        enabled: {
          name: 'enabled',
          type: 'Boolean',
          attributes: [{ name: '@default', args: [{ value: true }] }],
        },
        sessionId: {
          name: 'sessionId',
          type: 'String',
          isOptional: true,
        },
        roleName: {
          name: 'roleName',
          type: 'String',
          isForeignKey: true,
          relationField: 'role',
        },
        role: {
          name: 'role',
          type: 'Role',
          isDataModel: true,
          backLink: 'users',
          isRelationOwner: true,
          foreignKeyMapping: { name: 'roleName' },
        },
        teamId: {
          name: 'teamId',
          type: 'Int',
          isOptional: true,
          isForeignKey: true,
          relationField: 'team',
        },
        team: {
          name: 'team',
          type: 'Team',
          isDataModel: true,
          isOptional: true,
          backLink: 'users',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'teamId' },
        },
        files: {
          name: 'files',
          type: 'File',
          isDataModel: true,
          isArray: true,
          backLink: 'createdBy',
        },
        judgeHost: {
          name: 'judgeHost',
          type: 'JudgeHost',
          isDataModel: true,
          isOptional: true,
          backLink: 'user',
        },
        judgings: {
          name: 'judgings',
          type: 'Judging',
          isDataModel: true,
          isArray: true,
          backLink: 'juryMember',
        },
        sentMessages: {
          name: 'sentMessages',
          type: 'ClarificationMessage',
          isDataModel: true,
          isArray: true,
          backLink: 'sentBy',
        },
        seenMessages: {
          name: 'seenMessages',
          type: 'ClarificationSeen',
          isDataModel: true,
          isArray: true,
          backLink: 'user',
        },
      },
      uniqueConstraints: {
        id: {
          name: 'id',
          fields: ['id'],
        },
        username: {
          name: 'username',
          fields: ['username'],
        },
      },
    },
    role: {
      name: 'Role',
      fields: {
        name: {
          name: 'name',
          type: 'String',
          isId: true,
        },
        description: {
          name: 'description',
          type: 'String',
        },
        users: {
          name: 'users',
          type: 'User',
          isDataModel: true,
          isArray: true,
          backLink: 'role',
        },
      },
      uniqueConstraints: {
        name: {
          name: 'name',
          fields: ['name'],
        },
      },
    },
    team: {
      name: 'Team',
      fields: {
        id: {
          name: 'id',
          type: 'Int',
          isId: true,
          attributes: [{ name: '@default', args: [] }],
          isAutoIncrement: true,
        },
        name: {
          name: 'name',
          type: 'String',
        },
        enabled: {
          name: 'enabled',
          type: 'Boolean',
          attributes: [{ name: '@default', args: [{ value: true }] }],
        },
        room: {
          name: 'room',
          type: 'String',
          isOptional: true,
        },
        comments: {
          name: 'comments',
          type: 'String',
          isOptional: true,
        },
        penalty: {
          name: 'penalty',
          type: 'Int',
          attributes: [{ name: '@default', args: [{ value: 0 }] }],
        },
        categoryId: {
          name: 'categoryId',
          type: 'Int',
          isForeignKey: true,
          relationField: 'category',
        },
        category: {
          name: 'category',
          type: 'TeamCategory',
          isDataModel: true,
          backLink: 'teams',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'categoryId' },
        },
        users: {
          name: 'users',
          type: 'User',
          isDataModel: true,
          isArray: true,
          backLink: 'team',
        },
        contests: {
          name: 'contests',
          type: 'TeamContest',
          isDataModel: true,
          isArray: true,
          backLink: 'team',
        },
        submissions: {
          name: 'submissions',
          type: 'Submission',
          isDataModel: true,
          isArray: true,
          backLink: 'team',
        },
        clarifications: {
          name: 'clarifications',
          type: 'Clarification',
          isDataModel: true,
          isArray: true,
          backLink: 'team',
        },
        scores: {
          name: 'scores',
          type: 'ScoreCache',
          isDataModel: true,
          isArray: true,
          backLink: 'team',
        },
      },
      uniqueConstraints: {
        id: {
          name: 'id',
          fields: ['id'],
        },
        name: {
          name: 'name',
          fields: ['name'],
        },
      },
    },
    teamContest: {
      name: 'TeamContest',
      fields: {
        teamId: {
          name: 'teamId',
          type: 'Int',
          isId: true,
          isForeignKey: true,
          relationField: 'team',
        },
        team: {
          name: 'team',
          type: 'Team',
          isDataModel: true,
          backLink: 'contests',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'teamId' },
        },
        contestId: {
          name: 'contestId',
          type: 'Int',
          isId: true,
          isForeignKey: true,
          relationField: 'contest',
        },
        contest: {
          name: 'contest',
          type: 'Contest',
          isDataModel: true,
          backLink: 'teams',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'contestId' },
        },
      },
      uniqueConstraints: {
        teamId_contestId: {
          name: 'teamId_contestId',
          fields: ['teamId', 'contestId'],
        },
      },
    },
    teamCategory: {
      name: 'TeamCategory',
      fields: {
        id: {
          name: 'id',
          type: 'Int',
          isId: true,
          attributes: [{ name: '@default', args: [] }],
          isAutoIncrement: true,
        },
        name: {
          name: 'name',
          type: 'String',
        },
        rank: {
          name: 'rank',
          type: 'Int',
        },
        color: {
          name: 'color',
          type: 'String',
          attributes: [{ name: '@default', args: [{ value: '#ffffff' }] }],
        },
        visible: {
          name: 'visible',
          type: 'Boolean',
          attributes: [{ name: '@default', args: [{ value: true }] }],
        },
        teams: {
          name: 'teams',
          type: 'Team',
          isDataModel: true,
          isArray: true,
          backLink: 'category',
        },
      },
      uniqueConstraints: {
        id: {
          name: 'id',
          fields: ['id'],
        },
        name: {
          name: 'name',
          fields: ['name'],
        },
        rank: {
          name: 'rank',
          fields: ['rank'],
        },
      },
    },
    contest: {
      name: 'Contest',
      fields: {
        id: {
          name: 'id',
          type: 'Int',
          isId: true,
          attributes: [{ name: '@default', args: [] }],
          isAutoIncrement: true,
        },
        name: {
          name: 'name',
          type: 'String',
        },
        shortName: {
          name: 'shortName',
          type: 'String',
        },
        activateTime: {
          name: 'activateTime',
          type: 'DateTime',
        },
        startTime: {
          name: 'startTime',
          type: 'DateTime',
        },
        endTime: {
          name: 'endTime',
          type: 'DateTime',
        },
        freezeTime: {
          name: 'freezeTime',
          type: 'DateTime',
        },
        unfreezeTime: {
          name: 'unfreezeTime',
          type: 'DateTime',
        },
        enabled: {
          name: 'enabled',
          type: 'Boolean',
          attributes: [{ name: '@default', args: [{ value: true }] }],
        },
        processBalloons: {
          name: 'processBalloons',
          type: 'Boolean',
          attributes: [{ name: '@default', args: [{ value: false }] }],
        },
        public: {
          name: 'public',
          type: 'Boolean',
          attributes: [{ name: '@default', args: [{ value: true }] }],
        },
        openToAllTeams: {
          name: 'openToAllTeams',
          type: 'Boolean',
          attributes: [{ name: '@default', args: [{ value: false }] }],
        },
        verificationRequired: {
          name: 'verificationRequired',
          type: 'Boolean',
          attributes: [{ name: '@default', args: [{ value: false }] }],
        },
        teams: {
          name: 'teams',
          type: 'TeamContest',
          isDataModel: true,
          isArray: true,
          backLink: 'contest',
        },
        problems: {
          name: 'problems',
          type: 'ContestProblem',
          isDataModel: true,
          isArray: true,
          backLink: 'contest',
        },
        submissions: {
          name: 'submissions',
          type: 'Submission',
          isDataModel: true,
          isArray: true,
          backLink: 'contest',
        },
        judgings: {
          name: 'judgings',
          type: 'Judging',
          isDataModel: true,
          isArray: true,
          backLink: 'contest',
        },
        scoreCaches: {
          name: 'scoreCaches',
          type: 'ScoreCache',
          isDataModel: true,
          isArray: true,
          backLink: 'contest',
        },
        clarifications: {
          name: 'clarifications',
          type: 'Clarification',
          isDataModel: true,
          isArray: true,
          backLink: 'contest',
        },
      },
      uniqueConstraints: {
        id: {
          name: 'id',
          fields: ['id'],
        },
        shortName: {
          name: 'shortName',
          fields: ['shortName'],
        },
      },
    },
    problem: {
      name: 'Problem',
      fields: {
        id: {
          name: 'id',
          type: 'Int',
          isId: true,
          attributes: [{ name: '@default', args: [] }],
          isAutoIncrement: true,
        },
        name: {
          name: 'name',
          type: 'String',
        },
        timeLimit: {
          name: 'timeLimit',
          type: 'Float',
          attributes: [{ name: '@default', args: [{ value: 0 }] }],
        },
        memoryLimit: {
          name: 'memoryLimit',
          type: 'Int',
          attributes: [{ name: '@default', args: [{ value: 2097152 }] }],
        },
        outputLimit: {
          name: 'outputLimit',
          type: 'Int',
          attributes: [{ name: '@default', args: [{ value: 8192 }] }],
        },
        statementFileName: {
          name: 'statementFileName',
          type: 'String',
          isForeignKey: true,
          relationField: 'statementFile',
        },
        statementFile: {
          name: 'statementFile',
          type: 'File',
          isDataModel: true,
          backLink: 'problems',
          isRelationOwner: true,
          foreignKeyMapping: { name: 'statementFileName' },
        },
        runScriptId: {
          name: 'runScriptId',
          type: 'Int',
          isForeignKey: true,
          relationField: 'runScript',
        },
        runScript: {
          name: 'runScript',
          type: 'Executable',
          isDataModel: true,
          backLink: 'problemsRunScript',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'runScriptId' },
        },
        checkScriptId: {
          name: 'checkScriptId',
          type: 'Int',
          isForeignKey: true,
          relationField: 'checkScript',
        },
        checkScript: {
          name: 'checkScript',
          type: 'Executable',
          isDataModel: true,
          backLink: 'problemsCheckScript',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'checkScriptId' },
        },
        testcases: {
          name: 'testcases',
          type: 'Testcase',
          isDataModel: true,
          isArray: true,
          backLink: 'problem',
        },
        contests: {
          name: 'contests',
          type: 'ContestProblem',
          isDataModel: true,
          isArray: true,
          backLink: 'problem',
        },
      },
      uniqueConstraints: {
        id: {
          name: 'id',
          fields: ['id'],
        },
      },
    },
    contestProblem: {
      name: 'ContestProblem',
      fields: {
        id: {
          name: 'id',
          type: 'Int',
          isId: true,
          attributes: [{ name: '@default', args: [] }],
          isAutoIncrement: true,
        },
        contestId: {
          name: 'contestId',
          type: 'Int',
          isForeignKey: true,
          relationField: 'contest',
        },
        contest: {
          name: 'contest',
          type: 'Contest',
          isDataModel: true,
          backLink: 'problems',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'contestId' },
        },
        problemId: {
          name: 'problemId',
          type: 'Int',
          isForeignKey: true,
          relationField: 'problem',
        },
        problem: {
          name: 'problem',
          type: 'Problem',
          isDataModel: true,
          backLink: 'contests',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'problemId' },
        },
        shortName: {
          name: 'shortName',
          type: 'String',
        },
        points: {
          name: 'points',
          type: 'Int',
          attributes: [{ name: '@default', args: [{ value: 1 }] }],
        },
        allowSubmit: {
          name: 'allowSubmit',
          type: 'Boolean',
          attributes: [{ name: '@default', args: [{ value: true }] }],
        },
        allowJudge: {
          name: 'allowJudge',
          type: 'Boolean',
          attributes: [{ name: '@default', args: [{ value: true }] }],
        },
        color: {
          name: 'color',
          type: 'String',
        },
        submissions: {
          name: 'submissions',
          type: 'Submission',
          isDataModel: true,
          isArray: true,
          backLink: 'problem',
        },
        scores: {
          name: 'scores',
          type: 'ScoreCache',
          isDataModel: true,
          isArray: true,
          backLink: 'problem',
        },
        clarifications: {
          name: 'clarifications',
          type: 'Clarification',
          isDataModel: true,
          isArray: true,
          backLink: 'problem',
        },
      },
      uniqueConstraints: {
        id: {
          name: 'id',
          fields: ['id'],
        },
        contestId_shortName: {
          name: 'contestId_shortName',
          fields: ['contestId', 'shortName'],
        },
      },
    },
    file: {
      name: 'File',
      fields: {
        name: {
          name: 'name',
          type: 'String',
          isId: true,
        },
        type: {
          name: 'type',
          type: 'String',
        },
        size: {
          name: 'size',
          type: 'Int',
        },
        md5Sum: {
          name: 'md5Sum',
          type: 'String',
        },
        kind: {
          name: 'kind',
          type: 'FileKind',
          attributes: [{ name: '@default', args: [] }],
        },
        createdAt: {
          name: 'createdAt',
          type: 'DateTime',
          attributes: [{ name: '@default', args: [] }],
        },
        createdById: {
          name: 'createdById',
          type: 'Int',
          isOptional: true,
          isForeignKey: true,
          relationField: 'createdBy',
        },
        createdBy: {
          name: 'createdBy',
          type: 'User',
          isDataModel: true,
          isOptional: true,
          backLink: 'files',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'createdById' },
        },
        parentDirectoryName: {
          name: 'parentDirectoryName',
          type: 'String',
          isOptional: true,
          isForeignKey: true,
          relationField: 'parentDirectory',
        },
        parentDirectory: {
          name: 'parentDirectory',
          type: 'File',
          isDataModel: true,
          isOptional: true,
          backLink: 'children',
          isRelationOwner: true,
          foreignKeyMapping: { name: 'parentDirectoryName' },
        },
        children: {
          name: 'children',
          type: 'File',
          isDataModel: true,
          isArray: true,
          backLink: 'parentDirectory',
        },
        problems: {
          name: 'problems',
          type: 'Problem',
          isDataModel: true,
          isArray: true,
          backLink: 'statementFile',
        },
        executableSourceFile: {
          name: 'executableSourceFile',
          type: 'Executable',
          isDataModel: true,
          isOptional: true,
          backLink: 'sourceFile',
        },
        executableBuildScript: {
          name: 'executableBuildScript',
          type: 'Executable',
          isDataModel: true,
          isOptional: true,
          backLink: 'buildScript',
        },
        testcaseInputFile: {
          name: 'testcaseInputFile',
          type: 'Testcase',
          isDataModel: true,
          isOptional: true,
          backLink: 'inputFile',
        },
        testcaseOutputFile: {
          name: 'testcaseOutputFile',
          type: 'Testcase',
          isDataModel: true,
          isOptional: true,
          backLink: 'outputFile',
        },
        languageBuildScript: {
          name: 'languageBuildScript',
          type: 'Language',
          isDataModel: true,
          isOptional: true,
          backLink: 'buildScript',
        },
        submissionSourceFile: {
          name: 'submissionSourceFile',
          type: 'Submission',
          isDataModel: true,
          isOptional: true,
          backLink: 'sourceFile',
        },
        judgingCompileOutputFile: {
          name: 'judgingCompileOutputFile',
          type: 'Judging',
          isDataModel: true,
          isOptional: true,
          backLink: 'compileOutputFile',
        },
        judgingRunOutputFile: {
          name: 'judgingRunOutputFile',
          type: 'JudgingRun',
          isDataModel: true,
          isOptional: true,
          backLink: 'runOutputFile',
        },
        judgingRunErrorOutputFile: {
          name: 'judgingRunErrorOutputFile',
          type: 'JudgingRun',
          isDataModel: true,
          isOptional: true,
          backLink: 'errorOutputFile',
        },
        judgingRunCheckerOutputFile: {
          name: 'judgingRunCheckerOutputFile',
          type: 'JudgingRun',
          isDataModel: true,
          isOptional: true,
          backLink: 'checkerOutputFile',
        },
      },
      uniqueConstraints: {
        name: {
          name: 'name',
          fields: ['name'],
        },
      },
    },
    executable: {
      name: 'Executable',
      fields: {
        id: {
          name: 'id',
          type: 'Int',
          isId: true,
          attributes: [{ name: '@default', args: [] }],
          isAutoIncrement: true,
        },
        name: {
          name: 'name',
          type: 'String',
        },
        description: {
          name: 'description',
          type: 'String',
          isOptional: true,
        },
        default: {
          name: 'default',
          type: 'Boolean',
          attributes: [{ name: '@default', args: [{ value: false }] }],
        },
        dockerImage: {
          name: 'dockerImage',
          type: 'String',
          isOptional: true,
        },
        type: {
          name: 'type',
          type: 'ExecutableType',
        },
        sourceFileName: {
          name: 'sourceFileName',
          type: 'String',
          isForeignKey: true,
          relationField: 'sourceFile',
        },
        sourceFile: {
          name: 'sourceFile',
          type: 'File',
          isDataModel: true,
          backLink: 'executableSourceFile',
          isRelationOwner: true,
          foreignKeyMapping: { name: 'sourceFileName' },
        },
        buildScriptName: {
          name: 'buildScriptName',
          type: 'String',
          isOptional: true,
          isForeignKey: true,
          relationField: 'buildScript',
        },
        buildScript: {
          name: 'buildScript',
          type: 'File',
          isDataModel: true,
          isOptional: true,
          backLink: 'executableBuildScript',
          isRelationOwner: true,
          foreignKeyMapping: { name: 'buildScriptName' },
        },
        problemsRunScript: {
          name: 'problemsRunScript',
          type: 'Problem',
          isDataModel: true,
          isArray: true,
          backLink: 'runScript',
        },
        problemsCheckScript: {
          name: 'problemsCheckScript',
          type: 'Problem',
          isDataModel: true,
          isArray: true,
          backLink: 'checkScript',
        },
      },
      uniqueConstraints: {
        id: {
          name: 'id',
          fields: ['id'],
        },
        sourceFileName: {
          name: 'sourceFileName',
          fields: ['sourceFileName'],
        },
        buildScriptName: {
          name: 'buildScriptName',
          fields: ['buildScriptName'],
        },
      },
    },
    testcase: {
      name: 'Testcase',
      fields: {
        id: {
          name: 'id',
          type: 'Int',
          isId: true,
          attributes: [{ name: '@default', args: [] }],
          isAutoIncrement: true,
        },
        description: {
          name: 'description',
          type: 'String',
          isOptional: true,
        },
        rank: {
          name: 'rank',
          type: 'Int',
        },
        sample: {
          name: 'sample',
          type: 'Boolean',
          attributes: [{ name: '@default', args: [{ value: false }] }],
        },
        deleted: {
          name: 'deleted',
          type: 'Boolean',
          attributes: [{ name: '@default', args: [{ value: false }] }],
        },
        inputFileName: {
          name: 'inputFileName',
          type: 'String',
          isForeignKey: true,
          relationField: 'inputFile',
        },
        inputFile: {
          name: 'inputFile',
          type: 'File',
          isDataModel: true,
          backLink: 'testcaseInputFile',
          isRelationOwner: true,
          foreignKeyMapping: { name: 'inputFileName' },
        },
        outputFileName: {
          name: 'outputFileName',
          type: 'String',
          isForeignKey: true,
          relationField: 'outputFile',
        },
        outputFile: {
          name: 'outputFile',
          type: 'File',
          isDataModel: true,
          backLink: 'testcaseOutputFile',
          isRelationOwner: true,
          foreignKeyMapping: { name: 'outputFileName' },
        },
        problemId: {
          name: 'problemId',
          type: 'Int',
          isForeignKey: true,
          relationField: 'problem',
        },
        problem: {
          name: 'problem',
          type: 'Problem',
          isDataModel: true,
          backLink: 'testcases',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'problemId' },
        },
        judgingRuns: {
          name: 'judgingRuns',
          type: 'JudgingRun',
          isDataModel: true,
          isArray: true,
          backLink: 'testcase',
        },
      },
      uniqueConstraints: {
        id: {
          name: 'id',
          fields: ['id'],
        },
        inputFileName: {
          name: 'inputFileName',
          fields: ['inputFileName'],
        },
        outputFileName: {
          name: 'outputFileName',
          fields: ['outputFileName'],
        },
        problemId_rank: {
          name: 'problemId_rank',
          fields: ['problemId', 'rank'],
        },
      },
    },
    judgingRun: {
      name: 'JudgingRun',
      fields: {
        id: {
          name: 'id',
          type: 'Int',
          isId: true,
          attributes: [{ name: '@default', args: [] }],
          isAutoIncrement: true,
        },
        result: {
          name: 'result',
          type: 'JudgingRunResult',
        },
        endTime: {
          name: 'endTime',
          type: 'DateTime',
        },
        runTime: {
          name: 'runTime',
          type: 'Float',
        },
        runMemory: {
          name: 'runMemory',
          type: 'Float',
        },
        judgingId: {
          name: 'judgingId',
          type: 'Int',
          isForeignKey: true,
          relationField: 'judging',
        },
        judging: {
          name: 'judging',
          type: 'Judging',
          isDataModel: true,
          backLink: 'runs',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'judgingId' },
        },
        testcaseId: {
          name: 'testcaseId',
          type: 'Int',
          isForeignKey: true,
          relationField: 'testcase',
        },
        testcase: {
          name: 'testcase',
          type: 'Testcase',
          isDataModel: true,
          backLink: 'judgingRuns',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'testcaseId' },
        },
        runOutputFileName: {
          name: 'runOutputFileName',
          type: 'String',
          isForeignKey: true,
          relationField: 'runOutputFile',
        },
        runOutputFile: {
          name: 'runOutputFile',
          type: 'File',
          isDataModel: true,
          backLink: 'judgingRunOutputFile',
          isRelationOwner: true,
          foreignKeyMapping: { name: 'runOutputFileName' },
        },
        errorOutputFileName: {
          name: 'errorOutputFileName',
          type: 'String',
          isForeignKey: true,
          relationField: 'errorOutputFile',
        },
        errorOutputFile: {
          name: 'errorOutputFile',
          type: 'File',
          isDataModel: true,
          backLink: 'judgingRunErrorOutputFile',
          isRelationOwner: true,
          foreignKeyMapping: { name: 'errorOutputFileName' },
        },
        checkerOutputFileName: {
          name: 'checkerOutputFileName',
          type: 'String',
          isForeignKey: true,
          relationField: 'checkerOutputFile',
        },
        checkerOutputFile: {
          name: 'checkerOutputFile',
          type: 'File',
          isDataModel: true,
          backLink: 'judgingRunCheckerOutputFile',
          isRelationOwner: true,
          foreignKeyMapping: { name: 'checkerOutputFileName' },
        },
      },
      uniqueConstraints: {
        id: {
          name: 'id',
          fields: ['id'],
        },
        runOutputFileName: {
          name: 'runOutputFileName',
          fields: ['runOutputFileName'],
        },
        errorOutputFileName: {
          name: 'errorOutputFileName',
          fields: ['errorOutputFileName'],
        },
        checkerOutputFileName: {
          name: 'checkerOutputFileName',
          fields: ['checkerOutputFileName'],
        },
        judgingId_testcaseId: {
          name: 'judgingId_testcaseId',
          fields: ['judgingId', 'testcaseId'],
        },
      },
    },
    judging: {
      name: 'Judging',
      fields: {
        id: {
          name: 'id',
          type: 'Int',
          isId: true,
          attributes: [{ name: '@default', args: [] }],
          isAutoIncrement: true,
        },
        startTime: {
          name: 'startTime',
          type: 'DateTime',
        },
        endTime: {
          name: 'endTime',
          type: 'DateTime',
          isOptional: true,
        },
        result: {
          name: 'result',
          type: 'JudgingResult',
          isOptional: true,
        },
        systemError: {
          name: 'systemError',
          type: 'String',
          isOptional: true,
        },
        verified: {
          name: 'verified',
          type: 'Boolean',
          attributes: [{ name: '@default', args: [{ value: false }] }],
        },
        verifyComment: {
          name: 'verifyComment',
          type: 'String',
          isOptional: true,
        },
        valid: {
          name: 'valid',
          type: 'Boolean',
          attributes: [{ name: '@default', args: [{ value: true }] }],
        },
        compileOutputFileName: {
          name: 'compileOutputFileName',
          type: 'String',
          isForeignKey: true,
          relationField: 'compileOutputFile',
        },
        compileOutputFile: {
          name: 'compileOutputFile',
          type: 'File',
          isDataModel: true,
          backLink: 'judgingCompileOutputFile',
          isRelationOwner: true,
          foreignKeyMapping: { name: 'compileOutputFileName' },
        },
        submissionId: {
          name: 'submissionId',
          type: 'Int',
          isForeignKey: true,
          relationField: 'submission',
        },
        submission: {
          name: 'submission',
          type: 'Submission',
          isDataModel: true,
          backLink: 'judgings',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'submissionId' },
        },
        juryMemberId: {
          name: 'juryMemberId',
          type: 'Int',
          isForeignKey: true,
          relationField: 'juryMember',
        },
        juryMember: {
          name: 'juryMember',
          type: 'User',
          isDataModel: true,
          backLink: 'judgings',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'juryMemberId' },
        },
        contestId: {
          name: 'contestId',
          type: 'Int',
          isForeignKey: true,
          relationField: 'contest',
        },
        contest: {
          name: 'contest',
          type: 'Contest',
          isDataModel: true,
          backLink: 'judgings',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'contestId' },
        },
        judgeHostId: {
          name: 'judgeHostId',
          type: 'Int',
          isForeignKey: true,
          relationField: 'judgeHost',
        },
        judgeHost: {
          name: 'judgeHost',
          type: 'JudgeHost',
          isDataModel: true,
          backLink: 'judgings',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'judgeHostId' },
        },
        runs: {
          name: 'runs',
          type: 'JudgingRun',
          isDataModel: true,
          isArray: true,
          backLink: 'judging',
        },
      },
      uniqueConstraints: {
        id: {
          name: 'id',
          fields: ['id'],
        },
        compileOutputFileName: {
          name: 'compileOutputFileName',
          fields: ['compileOutputFileName'],
        },
      },
    },
    judgeHost: {
      name: 'JudgeHost',
      fields: {
        id: {
          name: 'id',
          type: 'Int',
          isId: true,
          attributes: [{ name: '@default', args: [] }],
          isAutoIncrement: true,
        },
        hostname: {
          name: 'hostname',
          type: 'String',
        },
        active: {
          name: 'active',
          type: 'Boolean',
          attributes: [{ name: '@default', args: [{ value: true }] }],
        },
        pollTime: {
          name: 'pollTime',
          type: 'DateTime',
          isOptional: true,
        },
        userId: {
          name: 'userId',
          type: 'Int',
          isForeignKey: true,
          relationField: 'user',
        },
        user: {
          name: 'user',
          type: 'User',
          isDataModel: true,
          backLink: 'judgeHost',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'userId' },
        },
        submissions: {
          name: 'submissions',
          type: 'Submission',
          isDataModel: true,
          isArray: true,
          backLink: 'judgeHost',
        },
        judgings: {
          name: 'judgings',
          type: 'Judging',
          isDataModel: true,
          isArray: true,
          backLink: 'judgeHost',
        },
      },
      uniqueConstraints: {
        id: {
          name: 'id',
          fields: ['id'],
        },
        hostname: {
          name: 'hostname',
          fields: ['hostname'],
        },
        userId: {
          name: 'userId',
          fields: ['userId'],
        },
      },
    },
    submission: {
      name: 'Submission',
      fields: {
        id: {
          name: 'id',
          type: 'Int',
          isId: true,
          attributes: [{ name: '@default', args: [] }],
          isAutoIncrement: true,
        },
        submitTime: {
          name: 'submitTime',
          type: 'DateTime',
        },
        valid: {
          name: 'valid',
          type: 'Boolean',
          attributes: [{ name: '@default', args: [{ value: true }] }],
        },
        sourceFileName: {
          name: 'sourceFileName',
          type: 'String',
          isForeignKey: true,
          relationField: 'sourceFile',
        },
        sourceFile: {
          name: 'sourceFile',
          type: 'File',
          isDataModel: true,
          backLink: 'submissionSourceFile',
          isRelationOwner: true,
          foreignKeyMapping: { name: 'sourceFileName' },
        },
        teamId: {
          name: 'teamId',
          type: 'Int',
          isForeignKey: true,
          relationField: 'team',
        },
        team: {
          name: 'team',
          type: 'Team',
          isDataModel: true,
          backLink: 'submissions',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'teamId' },
        },
        contestId: {
          name: 'contestId',
          type: 'Int',
          isForeignKey: true,
          relationField: 'contest',
        },
        contest: {
          name: 'contest',
          type: 'Contest',
          isDataModel: true,
          backLink: 'submissions',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'contestId' },
        },
        problemId: {
          name: 'problemId',
          type: 'Int',
          isForeignKey: true,
          relationField: 'problem',
        },
        problem: {
          name: 'problem',
          type: 'ContestProblem',
          isDataModel: true,
          backLink: 'submissions',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'problemId' },
        },
        languageId: {
          name: 'languageId',
          type: 'Int',
          isForeignKey: true,
          relationField: 'language',
        },
        language: {
          name: 'language',
          type: 'Language',
          isDataModel: true,
          backLink: 'submissions',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'languageId' },
        },
        judgeHostId: {
          name: 'judgeHostId',
          type: 'Int',
          isOptional: true,
          isForeignKey: true,
          relationField: 'judgeHost',
        },
        judgeHost: {
          name: 'judgeHost',
          type: 'JudgeHost',
          isDataModel: true,
          isOptional: true,
          backLink: 'submissions',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'judgeHostId' },
        },
        judgings: {
          name: 'judgings',
          type: 'Judging',
          isDataModel: true,
          isArray: true,
          backLink: 'submission',
        },
      },
      uniqueConstraints: {
        id: {
          name: 'id',
          fields: ['id'],
        },
        sourceFileName: {
          name: 'sourceFileName',
          fields: ['sourceFileName'],
        },
      },
    },
    language: {
      name: 'Language',
      fields: {
        id: {
          name: 'id',
          type: 'Int',
          isId: true,
          attributes: [{ name: '@default', args: [] }],
          isAutoIncrement: true,
        },
        name: {
          name: 'name',
          type: 'String',
        },
        dockerImage: {
          name: 'dockerImage',
          type: 'String',
        },
        extensions: {
          name: 'extensions',
          type: 'String',
          isArray: true,
        },
        allowSubmit: {
          name: 'allowSubmit',
          type: 'Boolean',
          attributes: [{ name: '@default', args: [{ value: true }] }],
        },
        allowJudge: {
          name: 'allowJudge',
          type: 'Boolean',
          attributes: [{ name: '@default', args: [{ value: true }] }],
        },
        buildScriptName: {
          name: 'buildScriptName',
          type: 'String',
          isForeignKey: true,
          relationField: 'buildScript',
        },
        buildScript: {
          name: 'buildScript',
          type: 'File',
          isDataModel: true,
          backLink: 'languageBuildScript',
          isRelationOwner: true,
          foreignKeyMapping: { name: 'buildScriptName' },
        },
        submissions: {
          name: 'submissions',
          type: 'Submission',
          isDataModel: true,
          isArray: true,
          backLink: 'language',
        },
      },
      uniqueConstraints: {
        id: {
          name: 'id',
          fields: ['id'],
        },
        name: {
          name: 'name',
          fields: ['name'],
        },
        buildScriptName: {
          name: 'buildScriptName',
          fields: ['buildScriptName'],
        },
      },
    },
    clarification: {
      name: 'Clarification',
      fields: {
        id: {
          name: 'id',
          type: 'Int',
          isId: true,
          attributes: [{ name: '@default', args: [] }],
          isAutoIncrement: true,
        },
        general: {
          name: 'general',
          type: 'Boolean',
          attributes: [{ name: '@default', args: [{ value: true }] }],
        },
        messages: {
          name: 'messages',
          type: 'ClarificationMessage',
          isDataModel: true,
          isArray: true,
          backLink: 'clarification',
        },
        contestId: {
          name: 'contestId',
          type: 'Int',
          isForeignKey: true,
          relationField: 'contest',
        },
        contest: {
          name: 'contest',
          type: 'Contest',
          isDataModel: true,
          backLink: 'clarifications',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'contestId' },
        },
        problemId: {
          name: 'problemId',
          type: 'Int',
          isOptional: true,
          isForeignKey: true,
          relationField: 'problem',
        },
        problem: {
          name: 'problem',
          type: 'ContestProblem',
          isDataModel: true,
          isOptional: true,
          backLink: 'clarifications',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'problemId' },
        },
        teamId: {
          name: 'teamId',
          type: 'Int',
          isOptional: true,
          isForeignKey: true,
          relationField: 'team',
        },
        team: {
          name: 'team',
          type: 'Team',
          isDataModel: true,
          isOptional: true,
          backLink: 'clarifications',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'teamId' },
        },
      },
      uniqueConstraints: {
        id: {
          name: 'id',
          fields: ['id'],
        },
      },
    },
    clarificationMessage: {
      name: 'ClarificationMessage',
      fields: {
        id: {
          name: 'id',
          type: 'Int',
          isId: true,
          attributes: [{ name: '@default', args: [] }],
          isAutoIncrement: true,
        },
        content: {
          name: 'content',
          type: 'String',
        },
        sentTime: {
          name: 'sentTime',
          type: 'DateTime',
        },
        sentById: {
          name: 'sentById',
          type: 'Int',
          isForeignKey: true,
          relationField: 'sentBy',
        },
        sentBy: {
          name: 'sentBy',
          type: 'User',
          isDataModel: true,
          backLink: 'sentMessages',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'sentById' },
        },
        seenBy: {
          name: 'seenBy',
          type: 'ClarificationSeen',
          isDataModel: true,
          isArray: true,
          backLink: 'message',
        },
        clarificationId: {
          name: 'clarificationId',
          type: 'Int',
          isForeignKey: true,
          relationField: 'clarification',
        },
        clarification: {
          name: 'clarification',
          type: 'Clarification',
          isDataModel: true,
          backLink: 'messages',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'clarificationId' },
        },
      },
      uniqueConstraints: {
        id: {
          name: 'id',
          fields: ['id'],
        },
      },
    },
    clarificationSeen: {
      name: 'ClarificationSeen',
      fields: {
        userId: {
          name: 'userId',
          type: 'Int',
          isId: true,
          isForeignKey: true,
          relationField: 'user',
        },
        user: {
          name: 'user',
          type: 'User',
          isDataModel: true,
          backLink: 'seenMessages',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'userId' },
        },
        messageId: {
          name: 'messageId',
          type: 'Int',
          isId: true,
          isForeignKey: true,
          relationField: 'message',
        },
        message: {
          name: 'message',
          type: 'ClarificationMessage',
          isDataModel: true,
          backLink: 'seenBy',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'messageId' },
        },
      },
      uniqueConstraints: {
        userId_messageId: {
          name: 'userId_messageId',
          fields: ['userId', 'messageId'],
        },
      },
    },
    scoreCache: {
      name: 'ScoreCache',
      fields: {
        contestId: {
          name: 'contestId',
          type: 'Int',
          isId: true,
          isForeignKey: true,
          relationField: 'contest',
        },
        contest: {
          name: 'contest',
          type: 'Contest',
          isDataModel: true,
          backLink: 'scoreCaches',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'contestId' },
        },
        teamId: {
          name: 'teamId',
          type: 'Int',
          isId: true,
          isForeignKey: true,
          relationField: 'team',
        },
        team: {
          name: 'team',
          type: 'Team',
          isDataModel: true,
          backLink: 'scores',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'teamId' },
        },
        problemId: {
          name: 'problemId',
          type: 'Int',
          isId: true,
          isForeignKey: true,
          relationField: 'problem',
        },
        problem: {
          name: 'problem',
          type: 'ContestProblem',
          isDataModel: true,
          backLink: 'scores',
          isRelationOwner: true,
          foreignKeyMapping: { id: 'problemId' },
        },
        submissions: {
          name: 'submissions',
          type: 'Int',
          attributes: [{ name: '@default', args: [{ value: 0 }] }],
        },
        pending: {
          name: 'pending',
          type: 'Int',
          attributes: [{ name: '@default', args: [{ value: 0 }] }],
        },
        solveTime: {
          name: 'solveTime',
          type: 'DateTime',
          isOptional: true,
        },
        correct: {
          name: 'correct',
          type: 'Boolean',
          attributes: [{ name: '@default', args: [{ value: false }] }],
        },
        firstToSolve: {
          name: 'firstToSolve',
          type: 'Boolean',
          attributes: [{ name: '@default', args: [{ value: false }] }],
        },
        restrictedSubmissions: {
          name: 'restrictedSubmissions',
          type: 'Int',
          attributes: [{ name: '@default', args: [{ value: 0 }] }],
        },
        restrictedPending: {
          name: 'restrictedPending',
          type: 'Int',
          attributes: [{ name: '@default', args: [{ value: 0 }] }],
        },
        restrictedSolveTime: {
          name: 'restrictedSolveTime',
          type: 'DateTime',
          isOptional: true,
        },
        restrictedCorrect: {
          name: 'restrictedCorrect',
          type: 'Boolean',
          attributes: [{ name: '@default', args: [{ value: false }] }],
        },
        restrictedFirstToSolve: {
          name: 'restrictedFirstToSolve',
          type: 'Boolean',
          attributes: [{ name: '@default', args: [{ value: false }] }],
        },
      },
      uniqueConstraints: {
        contestId_teamId_problemId: {
          name: 'contestId_teamId_problemId',
          fields: ['contestId', 'teamId', 'problemId'],
        },
      },
    },
  },
  deleteCascade: {
    user: ['ClarificationSeen'],
    team: ['TeamContest', 'Submission', 'Clarification', 'ScoreCache'],
    contest: [
      'TeamContest',
      'ContestProblem',
      'Judging',
      'Submission',
      'Clarification',
      'ScoreCache',
    ],
    problem: ['Testcase'],
    contestProblem: ['Submission', 'Clarification', 'ScoreCache'],
    submission: ['Judging'],
    clarification: ['ClarificationMessage'],
    clarificationMessage: ['ClarificationSeen'],
  },
  authModel: 'User',
};
export default metadata;
